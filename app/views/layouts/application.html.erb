<!DOCTYPE html>
<html ng-app="congressApp">
<head>

  <title>CongressConnections</title>
  <%= stylesheet_link_tag    'application', media: 'all', 'data-turbolinks-track' => true %>
  <%= javascript_include_tag 'application', 'data-turbolinks-track' => true %>
  <%= yield :javascript_includes %>
  <%= csrf_meta_tags %>
  <script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.3.0-beta.17/angular.js"> </script>
    <script src="//ajax.googleapis.com/ajax/libs/jquery/1.10.2/jquery.min.js"></script>
      
<script> 

var congressApp = angular.module('congressApp',[])


congressApp.controller('Congress', ['$scope', '$http', 'SenateData', 'CommitteeData', 'CommitteeLinksData', 'BillsData', 'VotesData', function($scope, $http, SenateData, CommitteeData, CommitteeLinksData, BillsData, VotesData) {


    // ------ Map Nodes ------ //

    // Mapping nodes is necessary in order to tie data together.
    // Call on this function for each of the senator nodes, group nodes, and links nodes.

    $scope.mapNodes = function(nodes, field){
                    
                nodesMap = d3.map()
                nodes.forEach(function(n){
                    nodesMap.set(n[field], n)
                });

                return nodesMap;

      };

  // ------ APIs ------ //


    // --- Capitol Words API --- //
    
    $scope.words = '';
    $scope.wordsdata = {};
    $scope.senfor = {};
    $scope.senwords = {};
    $scope.billCheck = '';


    // --- Bills API --- //

    $scope.changebill = function(billCheck) {
        
        //create copies of senators and links so that we can reset them on a new search
        $scope.senators = angular.copy($scope.senatorsReset);
        $scope.links = angular.copy($scope.linksReset);


        $scope.votesFinal = [];
        $scope.votes.forEach(function(v){
            if (v.bill_id == billCheck){
                $scope.votesFinal.push(v)
            }
        });

        var votesMap = $scope.mapNodes($scope.votesFinal, "bioguide_id");

        $scope.senators.forEach(function(s){
            s.vote = votesMap.get(s.bioguide_id);
        });

        for(i = $scope.senators.length-1; i >= 0; --i){
            if( $scope.senators[i].vote.vote !== "Yea" ){
                for (j = $scope.links.length-1; j >= 0; --j){
                    if ($scope.links[j].bioguide_id == $scope.senators[i].bioguide_id){
                        $scope.links.splice(j, 1)
                    }
                }
                $scope.senators.splice(i, 1);
            }
        };

    };

    //function that will make a live api call to Sunlight for individual senators======
    $scope.updatesenwords = function(){
    console.log($scope.senwords)
    var query_params = { apikey: 'fa096fc2f69047c8a33d4c3862cba250',
                        entity_type: 'legislator',
                        entity_value: $scope.senfor,
                        sort: 'count desc'
                         
                       };
    var endpoint = 'http://capitolwords.org/api/phrases.json';
     
    var options = {
      data: query_params,
      type: 'GET',
      dataType: 'jsonp'      
    };

    var request = jQuery.ajax(endpoint, options)
                        .done(showResponse2);
    };

    // function to return the json and reset 'wordsdata' variable=============
    function showResponse2 (response) {
                RESPONSE = response;
                $scope.senwords = response;
                $scope.$digest();
                
                if (this && this.url && (typeof(this.url) == "string")) {
                    var anchor = jQuery("#url");
                    anchor.text(this.url.toString());
                    anchor.attr('href', this.url.toString());
                }
                jQuery("#output").text(JSON.stringify(response, null, '  '));

            }


    //function that will make a live api call to Sunlight Capitol Words======
    $scope.updatewords = function(){
    var query_params = { apikey: 'fa096fc2f69047c8a33d4c3862cba250',
                         phrase: $scope.words,
                         per_page: 10,
                         chamber: 'senate',
                         start_date: '2013-01-01',
                         end_date: '2014-12-31'
                         
                       };
    var endpoint = 'http://capitolwords.org/api/phrases/legislator.json';
     
    var options = {
      data: query_params,
      type: 'GET',
      dataType: 'jsonp'      
    };

    var request = jQuery.ajax(endpoint, options)
                        .done(showResponse);
    };

    // function to return the json and reset 'wordsdata' variable=============
    function showResponse (response) {
                RESPONSE = response;
                
                $scope.wordsdata = response.results;
                
                //create copies of senators and links so that we can reset them on a new search
                $scope.senators = angular.copy($scope.senatorsReset);
                $scope.links = angular.copy($scope.linksReset);

                if (this && this.url && (typeof(this.url) == "string")) {
                    var anchor = jQuery("#url");
                    anchor.text(this.url.toString());
                    anchor.attr('href', this.url.toString());
                }
                jQuery("#output").text(JSON.stringify(response, null, '  '));

                var wordsMap = $scope.mapNodes($scope.wordsdata, "legislator");

                $scope.senators.forEach(function(s){
                    s.words = wordsMap.get(s.bioguide_id);
                })

                for(i = $scope.senators.length-1; i >= 0; --i){
                    if( typeof $scope.senators[i].words === "undefined" ){
                      for (j = $scope.links.length-1; j >= 0; --j){
                        if ($scope.links[j].bioguide_id == $scope.senators[i].bioguide_id){
                          $scope.links.splice(j, 1)
                        }
                      }
                      $scope.senators.splice(i, 1);
                    }
                }

                $scope.$digest();
            }



  
  // --- Senator Data API --- //

  $scope.senators = {};
  $scope.senatorsReset = {};
  

  //Get Senator data from the API
  SenateData.getData().then(function(json){
    $scope.senators = json.data;
    //create a copy so that it can be reset on a new search
    $scope.senatorsReset = angular.copy($scope.senators);
  });





  // --- Group Data API --- //

  $scope.groups = {};

  //Get Group Data from the API (including committees, industries)
  CommitteeData.getData().then(function(json){
    $scope.groups = json.data;
  });

  
  
  // --- Committee Links Data API --- //

  $scope.links = {};

  //Get Senator data from the API
  CommitteeLinksData.getData().then(function(json){
    $scope.links = json.data;
    //create a copy so that it can be reset on a new search
    $scope.linksReset = angular.copy($scope.links);
  });


  // --- Bill Data API --- //

  $scope.bills = {};

  //Get Senator data from the API
  BillsData.getData().then(function(json){
    $scope.bills = json.data;
  });


 // --- Votes Data API --- //

  $scope.votes = {};

  //Get Senator data from the API
  VotesData.getData().then(function(json){
    $scope.votes = json.data;
  });

  // --- Nodes Map --- //

  //The nodes map needs to be accessible by the links when they draw from one node to the other.

  $scope.senatorNodesMap = {};
  $scope.groupNodesMap = {};


  // ------ Senator Click function ------ //

    // To begin, senatorActive variable is false, indicating that the senator infor box should not be visible. It will become true when the senatorInfo function runs.

    $scope.senatorActive = false;

    // Sets the variable for the senator info box
    $scope.currentsen = {};
    // Will change senator info when clicked 
      
    // --- Expand the Senator Window --- //

    $scope.senatorInfo = function (info) {
        $scope.currentsen= info;
        $scope.senfor = info.bioguide_id;
        $scope.updatesenwords();

        $scope.senatorActive = true;

        $scope.termStart = new Date($scope.currentsen.term_start);
        $scope.termEnd = new Date($scope.currentsen.tern_end);
        $scope.today = new Date();

        // Find out what proportion of the way between term start date and term end date is today.

        $scope.termProgress = Math.abs($scope.today - $scope.termStart)/Math.abs($scope.termEnd - $scope.termStart);


        $scope.updateProgressBar();
         
      };

    // --- Minimize the Senator Window --- //

    $scope.minimizeSenator = function(){
        $scope.senatorActive = false;
    };     

}]);

// factory for the senators data
congressApp.factory('SenateData', ['$http', function($http){
  var senators = {};

  senators.getData = function(){
    var url = 'http://ccproject.herokuapp.com/prod_senators/';
    var endpoint = url; 
    return $http({ method: 'GET', url: endpoint });
  };

  return senators;

}]);

// factory for the committees data
congressApp.factory('CommitteeData', ['$http', function($http){
  var committees = {};

  committees.getData = function(){
    var url = 'http://ccproject.herokuapp.com/prod_committee_refs/';
    var endpoint = url; 
    return $http({ method: 'GET', url: endpoint });
  };

  return committees;

}]);


// factory for the committees links data
congressApp.factory('CommitteeLinksData', ['$http', function($http){
  var committeelinks = {};

  committeelinks.getData = function(){
    var url = 'http://ccproject.herokuapp.com/prod_committees/';
    var endpoint = url; 
    return $http({ method: 'GET', url: endpoint });
  };

  return committeelinks;

}]);

// factory for the bills data
congressApp.factory('BillsData', ['$http', function($http){
  var bills = {};

  bills.getData = function(){
    var url = 'http://ccproject.herokuapp.com/prod_bills/';
    var endpoint = url; 
    return $http({ method: 'GET', url: endpoint });
  };

  return bills;

}]);


// factory for the votes data
congressApp.factory('VotesData', ['$http', function($http){
  var votes = {};

  votes.getData = function(){
    var url = 'http://ccproject.herokuapp.com/prod_votes/';
    var endpoint = url; 
    return $http({ method: 'GET', url: endpoint });
  };

  return votes;

}]);




// ---------- Network Graph Directive ---------- //



//directive created to connect D3 graph to scope variables
congressApp.directive("networkGraph", function($window){
  return{
    restrict: "EA",
    template: "<svg width='800' height='750' id='graphCanvas'></svg>",
    link: function(scope, elem, attrs){



      //Watch the $scope.senators variable. If it updates, run the draw senators function.
      scope.$watch( 'senators', function(){
  
          if (scope.senators.length && scope.links.length){

            drawSenators("#graphCanvas");

          }

      });

      scope.$watch( 'wordsdata', function(){
            
            if (scope.senators.length && scope.wordsdata.length){
                updateSenators("#graphCanvas");
            }
      });

      scope.$watch( 'votesFinal', function(){
            
            if (scope.senators.length && scope.votesFinal.length){
                updateSenators("#graphCanvas");
            }
      });

      //Watch $scope.groups variable. If it updates, run the draw senators function.
      scope.$watch( 'groups', function() {

          if (scope.groups.length && scope.links.length){

            drawGroups("#graphCanvas");

          }


      });


      scope.$watch( 'links', function() {
            
          if (scope.links.length){
            drawSenators("#graphCanvas");
            drawGroups("#graphCanvas");
          }

      })
      

      // --- Draw SVG --- //

      var width = 800;
      var height = 750;

      var svg = d3.select(svg)
                      .attr("width", width)
                      .attr("height", height);

        var linkGroup = d3.select("svg").append("g").attr("class", "linkGroup");

      // --- Color Scale --- //

      var groupColors = ['#1f77b4', '#aec7e8', '#ff7f0e', '#ffbb78', '#2ca02c', '#98df8a', '#d62728', '##fff9896', '#9467bd', '#c5b0d5', '#8c564b', '#c49c94', '#e377c2', '#f7b6d2', '#f7f7f7', '#c7c7c7', '#bcbd22', '#dbdb8d', '#17becf', '#9edae5', '#ffff00'];

      


      // --- Outer Force for Senators --- //
      //this force will push the senators into a circle on the outside of the visualization

      var force = d3.layout.force()
                      .charge(-40)
                      .linkDistance(0)
                      .size([width, height]);

      // --- Inner Force for Groups --- //
      //this force will group the groups (committees, industries, etc.) into a forced layout in the center of the circle

      var force2 = d3.layout.force()
                      .charge(-200)
                      .linkDistance(0)
                      .size([width, height]);


      // ------ Draw Senator Nodes ------ //

      var drawSenators = function(selection){

          // --- Scales --- //

          scope.senatorNodesMap = scope.mapNodes(scope.senators, "bioguide_id");
          
          selection = d3.select(selection);

          groupScale = d3.scale.linear()
                      .domain([0, 30])
                      .range([5, 25]);

          force
                  .nodes(scope.senators)
                  .start();

          var links = scope.links;

          links.forEach(function(l){

              l.source = scope.senatorNodesMap.get(l.bioguide_id);

          });

          var link = linkGroup.selectAll("line.link")
                        .data(scope.links);

          link.enter()
                          .append("line")
                          .attr("x1", function(d){
                              return d.source.x
                          })
                          .attr("y1", function(d){
                              return d.source.y
                          })
                          .attr("class", function(d){
                            return "link " + d.bioguide_id + " " + d.committee_id
                          })
                          .attr("stroke", "rgba(220,220,220,.3")
                          .attr("stroke-opacity", 0.8);

          link.exit().remove();


          //Function to establish whether or not there is a word count for the senators

          // --- Draw Senator Nodes --- //

          
          //Add a variable that include all committees that the senator is on. This will be used to add them as classes to each node.
          scope.senators.forEach(function(s){
            s.committees = []
            scope.links.forEach(function(l){
                if (l.bioguide_id == s.bioguide_id){
                    s.committees.push(l.committee_id)
                }
            })
            s.committees = s.committees.join(" ");
          });

          var senatorNodeGroup = selection.selectAll("g.senator")
                          .data(scope.senators)
                      
                      senatorNodeGroup.enter()
                                .append("g")
                                .attr("class", function(d){
                                    return "senator " + d.committees
                                })
                                .append("circle")
                                .attr("r", 6)
                                .on("click", function(d,i) { scope.senatorInfo(d); })
                                .attr("fill", function(d){
                                      if (d.party == "D"){
                                          return "rgba(142,178,197,1)"
                                      }
                                      else if (d.party == "R"){
                                        return "rgb(229,98,92)"
                                      }
                                      else{
                                        return "rgb(182,98,144)"
                                      }
                                  });

                    
                    // --- Senator Faces --- //

                    //On mouseover, the nodes will fill with the associated senator's face. The following group sets up each node to attribute it with a given image.

                    senatorNodeGroup.append("svg:defs")
                                .append("svg:pattern")
                                .attr("id", function(d){
                                    return "image_" + d.nm_last
                                })
                                .attr("patternUnits", "userSpaceOnUse")
                                .attr("width", "52")
                                .attr("height", "57")
                                .attr("x", 27)
                                .attr("y", 30)
                                .append("svg:image")
                                .attr("xlink:href", function(d){
                                    return "/assets/225x275/" + d.bioguide_id + ".jpg"
                                })
                                .attr("x", 0)
                                .attr("y", 0)
                                .attr("width", "50")
                                .attr("height", "57");
                      

                      // --- Senator MouseOver Event --- //

                      // When the user mouses over a senator node, it will increase in size, change the fill to the senator's photo, and light up and nodes that it is commected to.
                                  
                      senatorNodeGroup
                                .on("mouseover", function(d){
                                    
                                    var linkClass = "line." + d.bioguide_id;

                                    // Variable representing circles with this senator's bioguide_id.
                                    var nodeClass = "g." + d.bioguide_id;

                                    // All Senator Nodes
                                    // Reduce the alpha level of every senator node to make them transparent.

                                    d3.selectAll("g.senator")
                                        .select("circle")
                                        .attr("fill", function(d){
                                              if (d.party == "D"){
                                                  return "rgba(142,178,197,.2)"
                                              }
                                              else if (d.party == "R"){
                                                  return "rgba(229,98,92,.2)"
                                              }
                                              else{
                                                  return "rgba(182,98,144,.2)"
                                              }
                                          })
                                        .attr("stroke", "none");

                                    // Senator Name
                                    // Append the senator's name to the node

                                    d3.select(this)
                                        .append("text")
                                        .text(function(d){
                                            return d.nm_last
                                        })
                                        .attr("text-anchor", "middle")
                                        .attr("transform", "translate(0, -25)")
                                        .style("font-family", "Open Sans Condensed")
                                        .style("font-size", "16px")
                                        .style("color", "black");

                                    // Senator Image
                                    // Fill this node with the senator's image

                                    d3.select(this)
                                        .select("circle")
                                        .attr("fill", function(d){
                                           return "url(#image_" + d.nm_last + ")"
                                        })
                                        .attr("stroke", "#ddd")
                                        .transition()
                                        .attr("r", 24);

                                    linkGroup.selectAll("line.link")
                                        .attr("stroke", "rgba(255,255,255,0)");

                                    var linkSelected = linkGroup.selectAll(linkClass);

                                    linkSelected
                                        .attr("stroke", "#ddd");

                                    // Committee Highlight
                                    // Show only the committees that the senator is a part of.

                                    d3.selectAll("circle.committee")
                                        .attr("fill", "rgba(220,220,220,.2)")
                                        .attr("stroke", "none");

                                    d3.selectAll("g.committee")
                                        .select("text")
                                        .remove()

                                    var committeeNodes = d3.selectAll(nodeClass);

                                    committeeNodes.select("circle")
                                        .attr("fill", "rgba(220,220,220,1)")
                                        .transition()
                                        .attr("r", 30)

                                    committeeNodes.append("text")
                                        .text(function(d){
                                            return d.committee_name
                                        })
                                        .attr("text-anchor", "middle")
                                        .style("font-family", "Open Sans Condensed")
                                        .style("font-size", "16px");

                                  })
                                  .on("mouseout", function(d){

                                        d3.selectAll("g.senator")
                                            .select("circle")
                                            .attr("fill", function(d){
                                                  if (d.party == "D"){
                                                      return "rgba(142,178,197,1)"
                                                  }
                                                  else if (d.party == "R"){
                                                      return "rgba(229,98,92,1)"
                                                  }
                                                  else{
                                                      return "rgba(182,98,144,1)"
                                                  }
                                            });

                                        d3.select(this).select("text")
                                            .remove();
                                        
                                        d3.select(this).select("circle")
                                            .attr("fill", function(d){
                                                if (d.party == "D"){
                                                    return "rgba(142,178,197,1)"
                                                }
                                                else if (d.party == "R"){
                                                    return "rgba(229,98,92,1)"
                                                }
                                                else{
                                                    return "rgba(182,98,144,1)"
                                                }
                                            })
                                            .transition()
                                            .attr("r", 6)
                                            .attr("stroke", "none");

                                        linkGroup.selectAll("line.link")
                                            .attr("stroke", "rgba(220,220,220,.3)");

                                        // Committee Nodes
                                        // Return committee nodes to normal size.

                                        d3.selectAll("g.committee")
                                            .select("text").remove();

                                        d3.selectAll("g.committee")
                                            .select("circle")
                                            .attr("fill", "rgba(220,220,220,1)")
                                            .transition()
                                            .attr("r", 20);

                                        d3.selectAll("g.committee")
                                            .append("text")
                                            .text(function(d){
                                              return d.committee_id
                                            })   
                                            .attr("text-anchor", "middle")
                                            .attr("transform", "translate(0,5)")
                                            .style("font-family", "Open Sans Condensed")
                                            .style("font-size", "16px");


                                  });

                      senatorNodeGroup.exit().remove();
          

            
         

              force.on("tick", function(e) {

                     scope.senators.forEach(function(o, i){

                          keys = scope.senators.length;
                          
                          k = e.alpha * 0.1;

                          o.x += (centerPlacement(550, keys, i).x - o.x) * k;
                          o.y += (centerPlacement(550, keys, i).y - o.y) * k;
                      });
                  

                  senatorNodeGroup.attr("transform", function(d) {
                      return "translate(" + d.x + ", " + d.y + ")"
                    });

                  link.attr("x1", function(d) { return d.source.x })
                        .attr("y1", function(d) { return d.source.y });

              });


              
              //Find the center value for the nodes that they will gravitate to
              centerPlacement = function(radius, keyLength, nodeIndex){

                  //the x value is a function of cosine and the index value of the node
                  var x = (width/2 + radius * Math.cos((360/keyLength * nodeIndex) * Math.PI / 180));

                  //the y value is a function of sine and the index value they will gravitate to
                  var y = ((height/2 + radius * Math.sin((360/keyLength * nodeIndex) * Math.PI / 180)));

                  return {"x": x, "y": y}

              };
      }

      // --- Update Senators --- //

      var updateSenators = function(selection){

        //Add a variable that include all committees that the senator is on. This will be used to add them as classes to each node.
          scope.senators.forEach(function(s){
            s.committees = []
            scope.links.forEach(function(l){
                if (l.bioguide_id == s.bioguide_id){
                    s.committees.push(l.committee_id)
                }
            })
            s.committees = s.committees.join(" ")
          });

        selection = d3.select(selection);

        var link = linkGroup.selectAll("line.link")
                        .data(scope.links);

            link.attr("class", function(d){
                            return "link " + d.bioguide_id + " " + d.committee_id
                        });

            link.exit().remove();

        var senatorNodeGroup = selection.selectAll("g.senator")
                          .data(scope.senators)
                      
                    senatorNodeGroup
                                .attr("class", function(d){
                                    return "senator " + d.committees
                                })
                                .attr("r", 6)
                                .select("circle")
                                .on("click", function(d,i) { scope.senatorInfo(d); })
                                .attr("fill", function(d){
                                      if (d.party == "D"){
                                          return "rgba(142,178,197,1)"
                                      }
                                      else if (d.party == "R"){
                                        return "rgb(229,98,92)"
                                      }
                                      else{
                                        return "rgb(182,98,144)"
                                      }
                                  });

                    senatorNodeGroup.exit().remove();
                    

        force
                  .nodes(scope.senators)
                  .start();


      };

      
      // --- Draw Groups Nodes --- //

      var drawGroups = function(selection){

            //Add a variable that include all committees that the senator is on. This will be used to add them as classes to each node.
            scope.groups.forEach(function(g){
              g.senators = []
              scope.links.forEach(function(l){
                  if (l.committee_id == g.committee_id){
                      g.senators.push(l.bioguide_id)
                  }
              })
              g.senators = g.senators.join(" ");
            });


          scope.groupNodesMap = scope.mapNodes(scope.groups, "committee_id");
          
          var selection = d3.select(selection);

          var committeeNodeGroup = selection.selectAll("g.committee")
                          .data(scope.groups);
                      
              committeeNodeGroup
                          .enter()
                          .append("g")
                          .attr("class", function(d){
                            return "committee " + d.senators
                          })
                          .append("circle")
                          .attr("class", "committee")
                          .attr("r", 20)
                          .attr("fill", function(d) {
                            return "rgba(220,220,220,1)"
                          })

              committeeNodeGroup
                          .select("text").remove();

              committeeNodeGroup
                          .append("text")
                          .text(function(d){
                             return d.committee_id
                          })
                          .style("font-size", "16px")
                          .style("font-family", "Open Sans Condensed")
                          .attr("text-anchor", "middle")
                          .attr("transform", "translate(0, 5)");
                          
                // -- Committee MouseOver Function -- //

                committeeNodeGroup.on("mouseover", function(d){
                                    
                                var linkClass = "line." + d.committee_id;
                                var nodeClass = "g." + d.committee_id;
                                
                                selection.selectAll("circle.committee")
                                          .attr("fill", function(d) {
                                              return "rgba(220,220,220,.20)"
                                          })
                                          .transition()
                                          .attr("r", 20);

                                        
                                selection.selectAll("text")
                                            .remove();

                                committeeNodeGroup.append("text")
                                            .text(function(d){
                                                return d.committee_id
                                            })
                                            .style("font-size", "16px")
                                            .style("font-family", "Open Sans Condensed")
                                            .attr("text-anchor", "middle")
                                            .attr("transform", "translate(0,5)");


                                selection.selectAll("g.committee")
                                        .select("text").remove();

                                d3.select(this)
                                        .append("text")
                                        .text(function(d){
                                            return d.committee_name
                                        })
                                        .attr("text-anchor", "middle")
                                        .style("font-family", "Open Sans Condensed")
                                        .style("font-size", "16px");

                                d3.select(this)
                                        .select("circle")
                                        .attr("fill", "rgba(220,220,220,1)")
                                        .transition()
                                        .attr("r", 30);

                                    linkGroup.selectAll("line.link")
                                        .attr("stroke", "rgba(255,255,255,0)");

                                    var linkSelected = linkGroup.selectAll(linkClass);

                                    linkSelected
                                        .attr("stroke", "#ddd");

                                    
                                    // Senator Nodes

                                    // Deacrease the alpha level of all nodes that are not connected to this node.

                                    selection.selectAll("g.senator")
                                        .select("circle")
                                        .attr("fill", function(d){
                                            if (d.party == "D"){
                                                return "rgba(142,178,197,.2)"
                                            }
                                            else if (d.party == "R"){
                                              return "rgba(229,98,92,.2)"
                                            }
                                            else{
                                              return "rgba(182,98,144,.2)"
                                            }
                                        })
                                        .attr("stroke", "none");

                                    // Light up the senators that are connected to this node.

                                    var nodesSelected = selection.selectAll(nodeClass);

                                    nodesSelected.select("circle")
                                          .attr("fill", function(d){
                                        if (d.party == "D"){
                                            return "rgba(142,178,197,1)"
                                        }
                                        else if (d.party == "R"){
                                          return "rgba(229,98,92,1)"
                                        }
                                        else{
                                          return "rgba(182,98,144,1)"
                                        }
                                    })

                                    nodesSelected
                                        .append("text")
                                        .text(function(d){
                                            return d.nm_last
                                        })
                                        .attr("text-anchor", "middle")
                                        .attr("transform", "translate(0, -15)")
                                        .style("font-family", "Open Sans Condensed")
                                        .style("font-size", "16px")
                                        .style("color", "black");

                // -- Committee MouseOut Function -- //

                                  }).on("mouseout", function(d){
                                        
                                        // All Senator Nodes
                                        // Return all senator nodes to alpha levels of 1 so that they are opaque.

                                        selection.selectAll("g.senator")
                                            .select("circle")
                                            .attr("fill", function(d){
                                                if (d.party == "D"){
                                                    return "rgba(142,178,197,1)"
                                                }
                                                else if (d.party == "R"){
                                                  return "rgba(229,98,92,1)"
                                                }
                                                else{
                                                  return "rgba(182,98,144,1)"
                                                }
                                            });

                                        d3.select(this).select("circle")
                                            .transition()
                                            .attr("r", 20);

                                        committeeNodeGroup.select("circle")
                                            .attr("fill", function(d) {
                                                return "rgba(220,220,220,1)"
                                            })


                                        linkGroup.selectAll("line.link")
                                            .attr("stroke", "rgba(220,220,220,.3)");

                                        selection.selectAll("text")
                                            .remove();

                                        committeeNodeGroup.append("text")
                                              .text(function(d){
                                                 return d.committee_id
                                              })
                                              .style("font-size", "16px")
                                              .style("font-family", "Open Sans Condensed")
                                              .attr("text-anchor", "middle")
                                              .attr("transform", "translate(0, 5)");

                                  });
                                  

              committeeNodeGroup.exit().remove();


              committeeNodeGroup.append("title")
                          .text(function(d) { return d.committee_name; });

              
              var links = scope.links;

              links.forEach(function(l){

                  l.target = scope.groupNodesMap.get(l.committee_id);

              });

              var link = selection.selectAll("line.link");

              link.attr("x2", function(d){
                            console.log( d.target.x )
                        })
                        .attr("y2", function(d){
                            return d.target.y
                        });


              force2
                  .nodes(scope.groups)
                  .start();

              force2.on("tick", function(e) {

                  committeeNodeGroup.attr("transform", function(d) {
                      return "translate(" + d.x + ", " + d.y + ")"

                    });

                  link.attr("x2", function(d) { return d.target.x })
                      .attr("y2", function(d) { return d.target.y });
              });

                  
      }
    }
  }

});



// ---------- Term Graph Directive ---------- //


//directive created to connect D3 graph to scope variables
congressApp.directive("termGraph", function($window){
    return{
        restrict: "EA",
        template: "<svg width='280' height='30' id='termCanvas'></svg>",
        link: function(scope, elem, attrs){

            svg = d3.select("#termCanvas")

            svg.append("rect")
                .attr("width", "180")
                .attr("height", "3")
                .attr("fill", "rgb(150,150,150)")
                .attr("x", 50)
                .attr("y", 15);

            svg.append("text")
                .attr("x", 30)
                .attr("y", 12)
                .attr("font-size", "16")
                .attr("text-anchor", "middle")
                .attr("font-family", "Open Sans Condensed")
                .text("Term");

            svg.append("text")
                .attr("x", 30)
                .attr("y", 26)
                .attr("font-size", "16")
                .attr("font-family", "Open Sans Condensed")
                .attr("text-anchor", "middle")
                .text("Start");

            svg.append("text")
                .attr("x", 250)
                .attr("y", 12)
                .attr("font-size", "16")
                .attr("text-anchor", "middle")
                .attr("font-family", "Open Sans Condensed")
                .text("Term");

            svg.append("text")
                .attr("x", 250)
                .attr("y", 26)
                .attr("font-size", "16")
                .attr("font-family", "Open Sans Condensed")
                .attr("text-anchor", "middle")
                .text("End");

            progressBar = svg.append("rect");

            progressBar
                .attr("class", "termProgress")
                .attr("y", "3")
                .attr("width", "4")
                .attr("height", "25");

            scope.updateProgressBar = function(){

                progressBar = d3.select("rect.termProgress");

                progressBar
                    .attr("x", function(){
                        return 50 + (180*scope.termProgress)
                    })
                    .attr("fill", function(d){
                        if (scope.currentsen.party == "D"){
                            return "rgba(142,178,197,1)"
                        }
                        else if (scope.currentsen.party == "R"){
                            return "rgba(229,98,92,1)"
                        }
                        else{
                            return "rgba(182,98,144,1)"
                        }
                    });

            };

        }
    }
});

</script>

</head>
<body>

<%= yield %>





</body>
</html>
