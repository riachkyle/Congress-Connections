<!DOCTYPE html>
<html ng-app="congressApp">
<head>
  <title>CongressConnections</title>
  <%= stylesheet_link_tag    'application', media: 'all', 'data-turbolinks-track' => true %>
  <%= javascript_include_tag 'application', 'data-turbolinks-track' => true %>
  <%= yield :javascript_includes %>
  <%= csrf_meta_tags %>
  <script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.3.0-beta.17/angular.js"> </script>
<script> 
var congressApp = angular.module('congressApp',[])


congressApp.controller('Congress', ['$scope', 'SenateData', 'CommitteeData',
  function($scope, SenateData, CommitteeData) {

  
  // --- Senator Data API --- //

  $scope.senators = {};

  //Get Senator data from the API
  SenateData.getData().then(function(json){
    $scope.senators = json.data;
  });





  // --- Group Data API --- //

  $scope.groups = {};

  //Get Group Data from the API (including committees, industries)
  CommitteeData.getData().then(function(json){
    // $scope.groups = json.data;
  });

  $scope.groups = [
      {"bioguide_Id": "SSVA", "name": "Senate Committee on Veterans' Affairs", "member_count": 14},
      { "bioguide_Id": "SSSB", "name": "Senate Committee on Small Business and Entrepreneurship", "member_count": 18},
      { "bioguide_Id": "SSRA", "name": "Senate Committee on Rules and Administration", "member_count": 18 },
      { "bioguide_Id": "SSJU", "name": "Senate Committee on the Judiciary", "member_count": 18 },
      { "bioguide_Id": "SSHR", "name": "Senate Committee on Health Education Labor and Pensions", "member_count": 22 },
      { "bioguide_Id": "SSGA" , "name": "Senate Committee on Homeland Security and Governmental Affairs", "member_count": 16 },
      { "bioguide_Id": "SSFR", "name": "Senate Committee on Foreign Relations", "member_count": 18 },
      { "bioguide_Id": "SSFI", "name": "Senate Committee on Finance", "member_count": 24 },
      { "bioguide_Id": "SSEV", "name": "Senate Committee on Environment and Public Works", "member_count": 18 },
      { "bioguide_Id": "SSEG", "name": "Senate Committee on Energy and Natural Resources", "member_count": 22 },
      { "bioguide_Id": "SSCM", "name": "Senate Committee on Commerce Science and Transportation", "member_count": 24 },
      { "bioguide_Id": "SSBU", "name": "Senate Committee on the Budget", "member_count": 22 },
      { "bioguide_Id": "SSBK", "name": "Senate Committee on Banking Housing and Urban Affairs", "member_count": 22 },
      { "bioguide_Id": "SSAS", "name": "Senate Committee on Armed Services", "member_count": 26},
      { "bioguide_Id": "SSAP", "name": "Senate Committee on Appropriations", "member_count": 30},
      { "bioguide_Id": "SSAF", "name": "Senate Committee on Agriculture Nutrition and Forestry", "member_count": 20 },
      {"bioguide_Id": "SPAG", "name": "Senate Special Committee on Aging", "member_count": 20 },
      { "bioguide_Id": "SLIN", "name": "Senate Select Committee on Intelligence", "member_count": 19 },
      { "bioguide_Id": "SLIA", "name": "Senate Committee on Indian Affairs", "member_count": 14 },
      { "bioguide_Id": "SLET", "name": "Senate Select Committee on Ethics", "member_count": 6 },
      { "bioguide_Id": "SCNC", "name": "United States Senate Caucus on International Narcotics Control", "member_count": 7 }
    ]



  
  // --- Links Data --- //

  $scope.newLinks = [
                    {"source": "SSVA", "target": "D001"},
                    {"source": "SSAS", "target": "D002"}
                ]

  // --- Update --- //



  $scope.update = function(){

  //update links

  $scope.force.stop();
  $scope.force2.stop();

  $scope.newLinks = [
                    {"source": "SLIN", "target": "D001"}
                ];



  //update nodes
    
     
      //update senators

     $scope.senators = [{"first_name": "Joe", "node_type": "senator", "bioguide_Id": "M001", "party":"R"}, {"first_name": "Sam", "node_type": "senator", "bioguide_Id": "D001", "party":"D"},{"first_name": "Joe", "node_type": "senator", "bioguide_Id": "M002", "party":"R"}, {"first_name": "Sam", "node_type": "senator", "bioguide_Id": "D002", "party":"D"},{"first_name": "Joe", "node_type": "senator", "bioguide_Id": "M003", "party":"R"}, {"first_name": "Sam", "node_type": "senator", "bioguide_Id": "D003"}, {"first_name": "Joe", "node_type": "senator", "bioguide_Id": "M001", "party":"R"}, {"first_name": "Sam", "node_type": "senator", "bioguide_Id": "D001", "party":"D"},{"first_name": "Joe", "node_type": "senator", "bioguide_Id": "M002", "party":"R"}, {"first_name": "Sam", "node_type": "senator", "bioguide_Id": "D002", "party":"D"},{"first_name": "Joe", "node_type": "senator", "bioguide_Id": "M003", "party":"R"}, {"first_name": "Sam", "node_type": "senator", "bioguide_Id": "D003"}, {"first_name": "Joe", "node_type": "senator", "bioguide_Id": "M001", "party":"R"}, {"first_name": "Sam", "node_type": "senator", "bioguide_Id": "D001", "party":"D"},{"first_name": "Joe", "node_type": "senator", "bioguide_Id": "M002", "party":"R"}, {"first_name": "Sam", "node_type": "senator", "bioguide_Id": "D002", "party":"D"},{"first_name": "Joe", "node_type": "senator", "bioguide_Id": "M003", "party":"R"}, {"first_name": "Sam", "node_type": "senator", "bioguide_Id": "D003"}, {"first_name": "Joe", "node_type": "senator", "bioguide_Id": "M001", "party":"R"}, {"first_name": "Sam", "node_type": "senator", "bioguide_Id": "D001", "party":"D"},{"first_name": "Joe", "node_type": "senator", "bioguide_Id": "M002", "party":"R"}, {"first_name": "Sam", "node_type": "senator", "bioguide_Id": "D002", "party":"D"},{"first_name": "Joe", "node_type": "senator", "bioguide_Id": "M003", "party":"R"}, {"first_name": "Sam", "node_type": "senator", "bioguide_Id": "D003"}, {"first_name": "Joe", "node_type": "senator", "bioguide_Id": "M001", "party":"R"}, {"first_name": "Sam", "node_type": "senator", "bioguide_Id": "D001", "party":"D"},{"first_name": "Joe", "node_type": "senator", "bioguide_Id": "M002", "party":"R"}, {"first_name": "Sam", "node_type": "senator", "bioguide_Id": "D002", "party":"D"},{"first_name": "Joe", "node_type": "senator", "bioguide_Id": "M003", "party":"R"}, {"first_name": "Sam", "node_type": "senator", "bioguide_Id": "D003"}, {"first_name": "Joe", "node_type": "senator", "bioguide_Id": "M001", "party":"R"}, {"first_name": "Sam", "node_type": "senator", "bioguide_Id": "D001", "party":"D"},{"first_name": "Joe", "node_type": "senator", "bioguide_Id": "M002", "party":"R"}, {"first_name": "Sam", "node_type": "senator", "bioguide_Id": "D002", "party":"D"},{"first_name": "Joe", "node_type": "senator", "bioguide_Id": "M003", "party":"R"}, {"first_name": "Sam", "node_type": "senator", "bioguide_Id": "D003"}, {"first_name": "Joe", "node_type": "senator", "bioguide_Id": "M001", "party":"R"}, {"first_name": "Sam", "node_type": "senator", "bioguide_Id": "D001", "party":"D"},{"first_name": "Joe", "node_type": "senator", "bioguide_Id": "M002", "party":"R"}, {"first_name": "Sam", "node_type": "senator", "bioguide_Id": "D002", "party":"D"},{"first_name": "Joe", "node_type": "senator", "bioguide_Id": "M003", "party":"R"}, {"first_name": "Sam", "node_type": "senator", "bioguide_Id": "D003"}, {"first_name": "Joe", "node_type": "senator", "bioguide_Id": "M001", "party":"R"}, {"first_name": "Sam", "node_type": "senator", "bioguide_Id": "D001", "party":"D"},{"first_name": "Joe", "node_type": "senator", "bioguide_Id": "M002", "party":"R"}, {"first_name": "Sam", "node_type": "senator", "bioguide_Id": "D002", "party":"D"},{"first_name": "Joe", "node_type": "senator", "bioguide_Id": "M003", "party":"R"}, {"first_name": "Sam", "node_type": "senator", "bioguide_Id": "D003"}, {"first_name": "Joe", "node_type": "senator", "bioguide_Id": "M001", "party":"R"}, {"first_name": "Sam", "node_type": "senator", "bioguide_Id": "D001", "party":"D"},{"first_name": "Joe", "node_type": "senator", "bioguide_Id": "M002", "party":"R"}, {"first_name": "Sam", "node_type": "senator", "bioguide_Id": "D002", "party":"D"},{"first_name": "Joe", "node_type": "senator", "bioguide_Id": "M003", "party":"R"}, {"first_name": "Sam", "node_type": "senator", "bioguide_Id": "D003"}, {"first_name": "Joe", "node_type": "senator", "bioguide_Id": "M001", "party":"R"}, {"first_name": "Sam", "node_type": "senator", "bioguide_Id": "D001", "party":"D"},{"first_name": "Joe", "node_type": "senator", "bioguide_Id": "M002", "party":"R"}, {"first_name": "Sam", "node_type": "senator", "bioguide_Id": "D002", "party":"D"},{"first_name": "Joe", "node_type": "senator", "bioguide_Id": "M003", "party":"R"}, {"first_name": "Sam", "node_type": "senator", "bioguide_Id": "D003"}, {"first_name": "Joe", "node_type": "senator", "bioguide_Id": "M001", "party":"R"}, {"first_name": "Sam", "node_type": "senator", "bioguide_Id": "D001", "party":"D"},{"first_name": "Joe", "node_type": "senator", "bioguide_Id": "M002", "party":"R"}, {"first_name": "Sam", "node_type": "senator", "bioguide_Id": "D002", "party":"D"},{"first_name": "Joe", "node_type": "senator", "bioguide_Id": "M003", "party":"R"}, {"first_name": "Sam", "node_type": "senator", "bioguide_Id": "D003"}, {"first_name": "Joe", "node_type": "senator", "bioguide_Id": "M001", "party":"R"}, {"first_name": "Sam", "node_type": "senator", "bioguide_Id": "D001", "party":"D"},{"first_name": "Joe", "node_type": "senator", "bioguide_Id": "M002", "party":"R"}, {"first_name": "Sam", "node_type": "senator", "bioguide_Id": "D002", "party":"D"},{"first_name": "Joe", "node_type": "senator", "bioguide_Id": "M003", "party":"R"}, {"first_name": "Sam", "node_type": "senator", "bioguide_Id": "D003"}, {"first_name": "Joe", "node_type": "senator", "bioguide_Id": "M001", "party":"R"}, {"first_name": "Sam", "node_type": "senator", "bioguide_Id": "D001", "party":"D"},{"first_name": "Joe", "node_type": "senator", "bioguide_Id": "M002", "party":"R"}, {"first_name": "Sam", "node_type": "senator", "bioguide_Id": "D002", "party":"D"},{"first_name": "Joe", "node_type": "senator", "bioguide_Id": "M003", "party":"R"}, {"first_name": "Sam", "node_type": "senator", "bioguide_Id": "D003"}];

      $scope.mapNodes = function (nodes){
                          nodesMap = d3.map()
                          nodes.forEach(function(n){
                              nodesMap.set(n.bioguide_Id, n)
                          })
                          return nodesMap;
                      };

      var senatorNode = d3.select("svg").selectAll("circle.senator")
                          .data($scope.senators)
                      
                      senatorNode
                                .attr("r", 4)
                                  .attr("fill", function(d) {
                                      if (d.party == "R"){
                                          return "rgb(177,22,35)";
                                      }
                                      else if (d.party == "D"){
                                          return "rgb(28,39,135)";
                                      }
                                      else{
                                          return "rgb(240,216,120)"
                                       }
                                  })
                                  .attr("stroke", "rgb(100,100,100)");

      senatorNode.append("title")
                              .text(function(d) { return d.first_name; });

     

    }
}]);

// factory for the senators data
congressApp.factory('SenateData', ['$http', function($http){
  var senators = {};

  senators.getData = function(){
    var url = 'http://localhost:3000/senators/show';
    var endpoint = url; 
    return $http({ method: 'GET', url: endpoint });
  };

  return senators;

}]);

// factory for the committees data
congressApp.factory('CommitteeData', ['$http', function($http){
  var committees = {};

  committees.getData = function(){
    var url = 'http://localhost:3000/committees';
    var endpoint = url; 
    return $http({ method: 'GET', url: endpoint });
  };

  return committees;

}])


//directive created to connect D3 graph to scope variables
congressApp.directive("networkGraph", function($window){
  return{
    restrict: "EA",
    template: "<svg width='800' height='800'></svg>",
    link: function(scope, elem, attrs){

     

      //Watch the $scope.senators variable. If it updates, run the draw senators function.
      scope.$watch( 'senators', function(){
  
          if (scope.senators.length){

            drawSenators();

          }

      });

      //Watch $scope.groups variable. If it updates, run the draw senators function.
      scope.$watch( 'groups', function() {

          drawGroups();

      })

      

      // --- Draw SVG --- //

      var width = 800;
      var height = 700;

      var svg = d3.select(selection)
                      .attr("width", width)
                      .attr("height", height)
      

      // --- Set Up the Data --- //

      function setupData(senators, groups){

          if (senators.length){
              
            mapNodes = function (nodes){
                nodesMap = d3.map()
                nodes.forEach(function(n){
                     nodesMap.set(n.bioguide_Id, n)
                })
                return nodesMap;
            }

          var senatorsNodesMap = mapNodes(scope.senators)
          var groupsNodesMap = mapNodes(scope.groups)

          var links = scope.newLinks;

          var linkedByIndex = {};

          links.forEach(function(l){
              l.source = groupsNodesMap.get(l.source);
              l.target = senatorsNodesMap.get(l.target);
          })

         }

      };


      // --- Draw Senator Nodes --- //

      var drawSenators = function(selection){

          // --- Scales --- //

          groupScale = d3.scale.linear()
                      .domain([0, 30])
                      .range([5, 25]);


          setupData(scope.senators, scope.groups);

          
          // --- Outer Force for Senators --- //
          //this force will push the senators into a circle on the outside of the visualization

          scope.force = d3.layout.force()
                      .charge(-20)
                      .linkDistance(0)
                      .size([width, height]);

          // --- Inner Force for Groups --- //
          //this force will group the groups (committees, industries, etc.) into a forced layout in the center of the circle

          scope.force2 = d3.layout.force()
                      .charge(-100)
                      .linkDistance(0)
                      .size([width, height]);

          scope.force
                  .nodes(scope.senators)
                  .start();

          scope.force2
                  .nodes(scope.groups)
                  .start();


          var link = svg.selectAll("line.link")
                      .data(scope.newLinks);

          link.enter()
                      .append("line")
                      .attr("x1", function(d){
                          return d.source.x
                      })
                      .attr("y1", function(d){
                          return d.source.y
                      })
                      .attr("x2", function(d){
                          return d.target.x
                      })
                      .attr("y2", function(d){
                          return d.target.y
                      })
                      .attr("class", "link")
                      .attr("stroke", "#ddd")
                      .attr("stroke-opacity", 0.8);

          link.exit().remove();

          var senatorNode = svg.selectAll("circle.senator")
                          .data(scope.senators)
                      
                      senatorNode.enter()
                                  .append("circle")
                                  .attr("class", "senator")
                                  .attr("r", 4)
                                  .attr("fill", function(d) {
                                      if (d.party == "R"){
                                          return "rgb(177,22,35)";
                                      }
                                      else if (d.party == "D"){
                                          return "rgb(28,39,135)"
                                      }
                                      else{
                                          return "rgb(240,216,120)"
                                       }
                                  })
                                  .attr("stroke", "rgb(150,150,150");

                      senatorNode.exit().remove();

            scope.force.on("tick", function(e) {

                     scope.senators.forEach(function(o, i){

                          keys = scope.senators.length;
                          
                          k = e.alpha * 0.1;

                          o.x += (centerPlacement(550, keys, i).x - o.x) * k;
                          o.y += (centerPlacement(550, keys, i).y - o.y) * k;
                      });
                  

                  link.attr("x1", function(d) { return d.source.x })
                      .attr("y1", function(d) { return d.source.y });

                  senatorNode.attr("cx", function(d) { return d.x })
                      .attr("cy", function(d) { return d.y });
              });

              scope.force2.on("tick", function(e) {

                  link.attr("x2", function(d) { return d.target.x })
                      .attr("y2", function(d) { return d.target.y });

                  committeeNodeGroup.attr("transform", function(d) {
                      return "translate(" + d.x + ", " + d.y + ")"
                  });
              });

              
              //Find the center value for the nodes that they will gravitate to
              centerPlacement = function(radius, keyLength, nodeIndex){

                  //the x value is a function of cosine and the index value of the node
                  var x = (width/2 + radius * Math.cos((360/keyLength * nodeIndex) * Math.PI / 180));

                  //the y value is a function of sine and the index value they will gravitate to
                  var y = ((height/2 + radius * Math.sin((360/keyLength * nodeIndex) * Math.PI / 180)));

                  return {"x": x, "y": y}

              };
      }

      
      // --- Draw Groups Nodes --- //

      var drawGroups = function(){

          var committeeNodeGroup = svg.selectAll("g.committee")
                          .data(scope.groups)
                      
              committeeNodeGroup.enter()
                          .append("g")
                          .attr("class", "committee")
                          .append("circle")
                          .attr("class", "committee")
                          .attr("r", function(d){
                            return groupScale(d.member_count)
                          })
                          .attr("fill", function(d) {
                            return "rgb(240,240,240)"
                          })
                          .attr("stroke", "rgb(180,180,180)");

              committeeNodeGroup.append("text")
                          .text(function(d){
                             return d.bioguide_Id
                          })
                          .style("font-size", "12px")
                          .style("font-family", "Oswald")
                          .attr("transform", "translate(-13,5)");
                                  

              committeeNodeGroup.exit().remove();


              committeeNodeGroup.append("title")
                          .text(function(d) { return d.name; });

              
      }

    }
  };
});

;
</script>
</head>
<body>

<%= yield %>





</body>
</html>
