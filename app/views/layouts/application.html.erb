<!DOCTYPE html>
<html ng-app="congressApp">
<head>

  <title>CongressConnections</title>
  <%= stylesheet_link_tag    'application', media: 'all', 'data-turbolinks-track' => true %>
  <%= javascript_include_tag 'application', 'data-turbolinks-track' => true %>
  <%= yield :javascript_includes %>
  <%= csrf_meta_tags %>
  <script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.3.0-beta.17/angular.js"> </script>
<script src="//ajax.googleapis.com/ajax/libs/jquery/1.10.2/jquery.min.js"></script>
      
<script> 
var congressApp = angular.module('congressApp',[])


congressApp.controller('Congress', ['$scope', '$http', 'SenateData', 'CommitteeData', 'CommitteeLinksData', function($scope, $http, SenateData, CommitteeData, CommitteeLinksData) {




$scope.words = '';
$scope.wordsdata = {};
$scope.senfor = {};
$scope.senwords = {};


// Sets the variable for the senator info box
  $scope.currentsen = {};
// Will change senator info when clicked 
  $scope.senatorinfo = function (info) {
    $scope.currentsen= info;
    $scope.senfor = info.bioguide_id;
    $scope.updatesenwords();
     
  };
//function that will make a live api call to Sunlight Capitol Words======
$scope.updatesenwords = function(){
console.log($scope.senfor)
var query_params = { apikey: 'fa096fc2f69047c8a33d4c3862cba250',
                    entity_type: 'legislator',
                    entity_value: $scope.senfor,
                    sort: 'count desc'
                     
                   };
var endpoint = 'http://capitolwords.org/api/phrases.json';
 
var options = {
  data: query_params,
  type: 'GET',
  dataType: 'jsonp'      
};

var request = jQuery.ajax(endpoint, options)
                    .done(showResponse2);
};

// function to return the json and reset 'wordsdata' variable=============
function showResponse2 (response) {
            RESPONSE = response;
            $scope.senwords = response;
            $scope.$apply();
            console.log($scope.senwords);
           
            if (this && this.url && (typeof(this.url) == "string")) {
                var anchor = jQuery("#url");
                anchor.text(this.url.toString());
                anchor.attr('href', this.url.toString());
            }
            jQuery("#output").text(JSON.stringify(response, null, '  '));

        }


//function that will make a live api call to Sunlight Capitol Words======
$scope.updatewords = function(){
var query_params = { apikey: 'fa096fc2f69047c8a33d4c3862cba250',
                     phrase: $scope.words,
                     start_date: '2012-11-01',
                     end_date: '2014-12-31'
                     
                   };
var endpoint = 'http://capitolwords.org/api/phrases/legislator.json';
 
var options = {
  data: query_params,
  type: 'GET',
  dataType: 'jsonp'      
};

var request = jQuery.ajax(endpoint, options)
                    .done(showResponse);
};

// function to return the json and reset 'wordsdata' variable=============
function showResponse (response) {
            RESPONSE = response;
            
            $scope.wordsdata = response.results;
            console.log($scope.wordsdata)

            if (this && this.url && (typeof(this.url) == "string")) {
                var anchor = jQuery("#url");
                anchor.text(this.url.toString());
                anchor.attr('href', this.url.toString());
            }
            jQuery("#output").text(JSON.stringify(response, null, '  '));

        }

  
  // --- Senator Data API --- //

  $scope.senators = {};
  

  //Get Senator data from the API
  SenateData.getData().then(function(json){
    $scope.senators = json.data;
    
console.log($scope.senators.length)
  });





  // --- Group Data API --- //

  $scope.groups = {};

  //Get Group Data from the API (including committees, industries)
  CommitteeData.getData().then(function(json){
    $scope.groups = json.data;
  });

  
  
  // --- Committee Links Data API --- //

  $scope.links = {};

  //Get Senator data from the API
  CommitteeLinksData.getData().then(function(json){
    $scope.links = json.data;
  });


  // --- Nodes Map --- //

  //The nodes map needs to be accessible by the links when they draw from one node to the other.

  $scope.senatorNodesMap = {};
  $scope.groupNodesMap = {};


  // --- Update --- //



  $scope.update = function(){

  //update links

  $scope.force.stop();
  $scope.force2.stop();



  //update nodes


      $scope.mapNodes = function (nodes){
                          nodesMap = d3.map()
                          nodes.forEach(function(n){
                              nodesMap.set(n.bioguide_id, n)
                          })
                          return nodesMap;
                      };

      var senatorNode = d3.select("svg").selectAll("circle.senator")
                          .data($scope.senators)
                      
                      senatorNode
                                .attr("r", 4)
                                  .attr("fill", function(d) {
                                      if (d.party == "R"){
                                          return "rgb(177,22,35)";
                                      }
                                      else if (d.party == "D"){
                                          return "rgb(28,39,135)";
                                      }
                                      else{
                                          return "rgb(240,216,120)"
                                       }
                                  })
                                  .attr("stroke", "rgb(100,100,100)");


      senatorNode.append("title")
                              .text(function(d) { return d.first_name; });

     

    }
}]);

// factory for the senators data
congressApp.factory('SenateData', ['$http', function($http){
  var senators = {};

  senators.getData = function(){
    var url = 'http://localhost:3000/prod_senators/show';
    var endpoint = url; 
    return $http({ method: 'GET', url: endpoint });
  };

  return senators;

}]);

// factory for the committees data
congressApp.factory('CommitteeData', ['$http', function($http){
  var committees = {};

  committees.getData = function(){
    var url = 'http://localhost:3000/prod_committee_refs/show';
    var endpoint = url; 
    return $http({ method: 'GET', url: endpoint });
  };

  return committees;

}]);


// factory for the committees links data
congressApp.factory('CommitteeLinksData', ['$http', function($http){
  var committeelinks = {};

  committeelinks.getData = function(){
    var url = 'http://localhost:3000/prod_committees/show';
    var endpoint = url; 
    return $http({ method: 'GET', url: endpoint });
  };

  return committeelinks;

}]);



//directive created to connect D3 graph to scope variables
congressApp.directive("networkGraph", function($window){
  return{
    restrict: "EA",
    template: "<svg width='800' height='800'></svg>",
    link: function(scope, elem, attrs){



      //Watch the $scope.senators variable. If it updates, run the draw senators function.
      scope.$watch( 'senators', function(){
  
          if (scope.senators.length && scope.links.length){

            drawSenators("svg");

          }

      });

      //Watch $scope.groups variable. If it updates, run the draw senators function.
      scope.$watch( 'groups', function() {

          if (scope.groups.length && scope.links.length){

            drawGroups("svg");

          }


      });

      scope.$watch( 'links', function() {
            
          if (scope.links.length){
            drawSenators("svg");
            drawGroups("svg");
          }

      })
      

      // --- Draw SVG --- //

      var width = 800;
      var height = 700;

      var svg = d3.select(svg)
                      .attr("width", width)
                      .attr("height", height);


      // --- Outer Force for Senators --- //
      //this force will push the senators into a circle on the outside of the visualization

      var force = d3.layout.force()
                      .charge(-20)
                      .linkDistance(0)
                      .size([width, height]);

      // --- Inner Force for Groups --- //
      //this force will group the groups (committees, industries, etc.) into a forced layout in the center of the circle

      var force2 = d3.layout.force()
                      .charge(-200)
                      .linkDistance(0)
                      .size([width, height]);
      

      // --- Set Up the Data --- //

      function mapNodes(nodes, field){
                    
                nodesMap = d3.map()
                nodes.forEach(function(n){
                    nodesMap.set(n[field], n)
                });

                return nodesMap;

      };


      // --- Draw Senator Nodes --- //

      var drawSenators = function(selection){

          // --- Scales --- //

          scope.senatorNodesMap = mapNodes(scope.senators, "bioguide_id");
          
          selection = d3.select(selection);

          groupScale = d3.scale.linear()
                      .domain([0, 30])
                      .range([5, 25]);

          force
                  .nodes(scope.senators)
                  .start();

          var links = scope.links;

          links.forEach(function(l){

              l.source = scope.senatorNodesMap.get(l.bioguide_id);

          });

          var link = selection.selectAll("line.link")
                        .data(scope.links);

          link.enter()
                          .append("line")
                          .attr("x1", function(d){
                              return d.source.x
                          })
                          .attr("y1", function(d){
                              return d.source.y
                          })
                          .attr("class", "link")
                          .attr("stroke", "#ddd")
                          .attr("stroke-opacity", 0.8);

          link.exit().remove();


          var senatorNode = selection.selectAll("circle.senator")
                          .data(scope.senators)
                      
                      senatorNode.enter()
                                  .append("circle")
                                  .attr("class", "senator")
                                  .attr("r", 4)
                                  .on("click", function(d,i) { scope.senatorinfo(d); })
                                  .attr("fill", function(d) {
                                      if (d.party == "R"){
                                          return "rgb(177,22,35)";
                                      }
                                      else if (d.party == "D"){
                                          return "rgb(28,39,135)"
                                      }
                                      else{
                                          return "rgb(240,216,120)"
                                       }
                                  })
                                  .attr("stroke", "rgb(150,150,150");

                      senatorNode.exit().remove();

          

            
         

              force.on("tick", function(e) {

                     scope.senators.forEach(function(o, i){

                          keys = scope.senators.length;
                          
                          k = e.alpha * 0.1;

                          o.x += (centerPlacement(550, keys, i).x - o.x) * k;
                          o.y += (centerPlacement(550, keys, i).y - o.y) * k;
                      });
                  

                  senatorNode.attr("cx", function(d) { return d.x })
                      .attr("cy", function(d) { return d.y });

                  link.attr("x1", function(d) { return d.source.x })
                        .attr("y1", function(d) { return d.source.y });

              });


              
              //Find the center value for the nodes that they will gravitate to
              centerPlacement = function(radius, keyLength, nodeIndex){

                  //the x value is a function of cosine and the index value of the node
                  var x = (width/2 + radius * Math.cos((360/keyLength * nodeIndex) * Math.PI / 180));

                  //the y value is a function of sine and the index value they will gravitate to
                  var y = ((height/2 + radius * Math.sin((360/keyLength * nodeIndex) * Math.PI / 180)));

                  return {"x": x, "y": y}

              };
      }

      
      // --- Draw Groups Nodes --- //

      var drawGroups = function(selection){

          scope.groupNodesMap = mapNodes(scope.groups, "committee_id");
          
          var selection = d3.select(selection);

          var committeeNodeGroup = selection.selectAll("g.committee")
                          .data(scope.groups)
                      
              committeeNodeGroup.enter()
                          .append("g")
                          .attr("class", "committee")
                          .append("circle")
                          .attr("class", "committee")
                          .attr("r", 15)
                          .attr("fill", function(d) {
                            return "rgb(240,240,240)"
                          })
                          .attr("stroke", "rgb(180,180,180)");

              committeeNodeGroup.append("text")
                          .text(function(d){
                             return d.committee_id
                          })
                          .style("font-size", "12px")
                          .style("font-family", "Oswald")
                          .attr("transform", "translate(-13,5)");
                                  

              committeeNodeGroup.exit().remove();


              committeeNodeGroup.append("title")
                          .text(function(d) { return d.committee_name; });

              
              var links = scope.links;

              links.forEach(function(l){

                  l.target = scope.groupNodesMap.get(l.committee_id);

              });

              var link = selection.selectAll("line.link");

              link.attr("x2", function(d){
                            console.log( d.target.x )
                        })
                        .attr("y2", function(d){
                            return d.target.y
                        });


              force2
                  .nodes(scope.groups)
                  .start();

              force2.on("tick", function(e) {

                  committeeNodeGroup.attr("transform", function(d) {
                      return "translate(" + d.x + ", " + d.y + ")"

                    });

                  link.attr("x2", function(d) { return d.target.x })
                      .attr("y2", function(d) { return d.target.y });
              });

                  
      }

        
    }
  };
});



</script>

</head>
<body>

<%= yield %>





</body>
</html>
